---
import Layout from '../../layouts/Layout.astro';
import { getCollection, getEntry } from 'astro:content';
import '../../styles/labo.css';

export async function getStaticPaths() {
  const laboEntries = await getCollection('labo');
  return laboEntries.map(entry => ({
    params: { id: entry.slug },
    props: { entry }
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Get all labo entries for sidebar
const allLaboEntries = await getCollection('labo');

// Group by category
const categories = {
  general: allLaboEntries.filter(entry => entry.data.category === 'general'),
  scenariomaking: allLaboEntries.filter(entry => entry.data.category === 'scenariomaking'),
  system: allLaboEntries.filter(entry => entry.data.category === 'system')
};

const categoryNames = {
  general: '全般',
  scenariomaking: 'シナリオ作成',
  system: 'システム'
};

// Function to build hierarchy
function buildHierarchy(entries) {
  const entryMap = new Map();
  const roots = [];
  
  // Create map of all entries
  entries.forEach(entry => {
    entryMap.set(entry.slug, { ...entry, children: [] });
  });
  
  // Build hierarchy
  entries.forEach(entry => {
    const item = entryMap.get(entry.slug);
    if (entry.data.parent) {
      const parent = entryMap.get(entry.data.parent);
      if (parent) {
        parent.children.push(item);
      } else {
        roots.push(item);
      }
    } else {
      roots.push(item);
    }
  });
  
  // Sort by order
  function sortByOrder(items) {
    items.sort((a, b) => a.data.order - b.data.order);
    items.forEach(item => sortByOrder(item.children));
  }
  
  sortByOrder(roots);
  return roots;
}

// Get parent entry if exists
let parentEntry = null;
if (entry.data.parent) {
  parentEntry = await getEntry('labo', entry.data.parent);
}
---

<Layout title={`${entry.data.title} - 研究室 - TRPG研究室`}>
  <nav class="breadcrumb">
    <a href="/">ホーム</a> &gt; 
    <a href="/labo">研究室</a> &gt; 
    <span class="category">{categoryNames[entry.data.category]}</span>
    {parentEntry && (
      <>
        &gt; <a href={`/labo/${parentEntry.slug}`}>{parentEntry.data.title}</a>
      </>
    )}
    &gt; <span class="current">{entry.data.title}</span>
  </nav>

  <div class="layout-container">
    <!-- Left Sidebar -->
    <aside class="sidebar">
      <section class="sidebar-section">
        <h3>記事一覧</h3>
        {Object.entries(categories).map(([categoryKey, entries]) => (
          entries.length > 0 && (
            <div class="category-group">
              <h4 class="category-title">{categoryNames[categoryKey]}</h4>
              <div class="hierarchy">
                {buildHierarchy(entries).map(entry => (
                  <div class="entry-item">
                    <a href={`/labo/${entry.slug}`} class="entry-link">
                      {entry.data.title}
                    </a>
                    {entry.children.length > 0 && (
                      <div class="children">
                        {entry.children.map(child => (
                          <div class="child-item">
                            <a href={`/labo/${child.slug}`} class="child-link">
                              {child.data.title}
                            </a>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )
        ))}
      </section>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
      <article>
        <header>
          <h1>{entry.data.title}</h1>
          <div class="meta">
            <span class="category">{categoryNames[entry.data.category]}</span>
            <span class="date">公開日: {entry.data.publishedAt.toISOString().split('T')[0]}</span>
          </div>
        </header>

        <div class="content">
          <Content />
        </div>
      </article>

      <nav class="back-link">
        <a href="/labo">← 研究室一覧に戻る</a>
      </nav>
    </main>
  </div></Layout>
</Layout>
